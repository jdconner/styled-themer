"use strict";function _isObject(e){return e&&"object"==typeof e&&!Array.isArray(e)}function _isFunction(e){return e&&"function"==typeof e}function _isPseudoClass(e){return e.includes(":")}function _isNegation(e){return"!"===e.charAt(0)}function _getList(e){return e.split(",").map(e=>e.trim())}function deepMerge(e,...t){const n=e;return _isObject(e)&&t.forEach(t=>{_isObject(t)&&Object.keys(t).forEach(s=>{"__proto__"!==s&&(_isObject(t[s])&&s in e?n[s]=deepMerge({...e[s]},t[s]):n[s]=t[s])})}),n}function parseForBooleanVariants(e,t){let n={...t};for(let[t,s]of Object.entries(n)){const i=_isNegation(t);let r=t;if(i&&(r=t.substring(1)),_isObject(s)&&!_isPseudoClass(t)){(i?!e[r]:!!e[r])&&(n=deepMerge({...n},parseForBooleanVariants(e,n[t]))),delete n[t]}}return n}function normalizeStylesheet(e,t,n){const s=n&&t[n]||{};let i=parseForBooleanVariants(e,deepMerge({...t},s));for(let[t,n]of Object.entries(i))if(_isFunction(n))i[t]=n(e);else if(_isPseudoClass(t)){let n={};for(let[s,r]of Object.entries(i[t]))n[s]=_isFunction(r)?r(e):r;t.includes(",")?(_getList(t).forEach(e=>{i[e]={...i[e],...n}}),delete i[t]):i[t]=n}return i}function theme(e,t={}){function n(s){const i=s.theme&&s.theme.components&&s.theme.components[e]||{};return deepMerge({...normalizeStylesheet(s,i)},normalizeStylesheet(s,_isFunction(t)?t(s):t),...n.styles.map(e=>e(s)))}return n.styles=[],n.addVariant=function(e,t){return this.styles.push((function(n){const s=n[e];return normalizeStylesheet(n,_isFunction(t)?t(n):t,s)})),this},n.addGlobalVariant=function(e,t){return this.styles.push((function(n){const s=n.theme[e];return normalizeStylesheet(n,_isFunction(t)?t(n):t,s)})),this},n}module.exports=theme;
